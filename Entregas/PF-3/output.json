{
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: true,
      endEmitted: true,
      reading: false,
      constructed: true,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      dataEmitted: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        constructed: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        noDelay: false,
        keepAlive: false,
        keepAliveInitialDelay: 0,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        maxRequestsPerSocket: 0,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8080',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 62
      },
      _server: Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        noDelay: false,
        keepAlive: false,
        keepAliveInitialDelay: 0,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        maxRequestsPerSocket: 0,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8080',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 62
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: [Circular *2],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: ServerResponse {
        _events: [Object: null prototype],
        _eventsCount: 1,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        _closed: false,
        socket: [Circular *1],
        _header: null,
        _keepAliveTimeout: 5000,
        _onPendingData: [Function: bound updateOutgoingData],
        req: [Circular *2],
        _sent100: false,
        _expect_continue: false,
        locals: [Object: null prototype] {},
        writeHead: [Function: writeHead],
        end: [Function: end],
        [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype]
      },
      [Symbol(async_id_symbol)]: 325,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    rawHeaders: [
      'user-agent',
      'vscode-restclient',
      'content-type',
      'application/json',
      'accept-encoding',
      'gzip, deflate',
      'Host',
      'localhost:8080',
      'Connection',
      'close',
      'Content-Length',
      '0'
    ],
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/636c34e7cbcfb8a8f0f64a43',
    method: 'POST',
    statusCode: null,
    statusMessage: null,
    client: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        constructed: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        constructed: true,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: true,
        errored: null,
        closed: false,
        closeEmitted: false,
        [Symbol(kOnFinished)]: []
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        noDelay: false,
        keepAlive: false,
        keepAliveInitialDelay: 0,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        maxRequestsPerSocket: 0,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8080',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 62
      },
      _server: Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        noDelay: false,
        keepAlive: false,
        keepAliveInitialDelay: 0,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        maxRequestsPerSocket: 0,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::8080',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 62
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: [Circular *2],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: ServerResponse {
        _events: [Object: null prototype],
        _eventsCount: 1,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        maxRequestsOnConnectionReached: false,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        _closed: false,
        socket: [Circular *1],
        _header: null,
        _keepAliveTimeout: 5000,
        _onPendingData: [Function: bound updateOutgoingData],
        req: [Circular *2],
        _sent100: false,
        _expect_continue: false,
        locals: [Object: null prototype] {},
        writeHead: [Function: writeHead],
        end: [Function: end],
        [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype]
      },
      [Symbol(async_id_symbol)]: 325,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: false,
      [Symbol(kSetKeepAliveInitialDelay)]: 0,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '/carrito',
    originalUrl: '/carrito/636c34e7cbcfb8a8f0f64a43',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/636c34e7cbcfb8a8f0f64a43',
      path: '/636c34e7cbcfb8a8f0f64a43',
      href: '/636c34e7cbcfb8a8f0f64a43',
      _raw: '/636c34e7cbcfb8a8f0f64a43'
    },
    params: { id: '636c34e7cbcfb8a8f0f64a43' },
    query: {},
    res: <ref *3> ServerResponse {
      _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      socket: <ref *1> Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: null,
        _readableState: [ReadableState],
        _events: [Object: null prototype],
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: [WritableState],
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: [Server],
        parser: [HTTPParser],
        on: [Function: socketListenerWrap],
        addListener: [Function: socketListenerWrap],
        prependListener: [Function: socketListenerWrap],
        setEncoding: [Function: socketSetEncoding],
        _paused: false,
        _httpMessage: [Circular *3],
        [Symbol(async_id_symbol)]: 325,
        [Symbol(kHandle)]: [TCP],
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: false,
        [Symbol(kSetKeepAliveInitialDelay)]: 0,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(RequestTimeout)]: undefined
      },
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [Circular *2],
      _sent100: false,
      _expect_continue: false,
      locals: [Object: null prototype] {},
      writeHead: [Function: writeHead],
      end: [Function: end],
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] { 'x-powered-by': [Array] }
    },
    body: {},
    _body: true,
    length: undefined,
    _parsedOriginalUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/carrito/636c34e7cbcfb8a8f0f64a43',
      path: '/carrito/636c34e7cbcfb8a8f0f64a43',
      href: '/carrito/636c34e7cbcfb8a8f0f64a43',
      _raw: '/carrito/636c34e7cbcfb8a8f0f64a43'
    },
    sessionStore: MongoStore {
      _events: [Object: null prototype] {
        disconnect: [Function: ondisconnect],
        connect: [Function: onconnect]
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      crypto: null,
      transformFunctions: {
        serialize: [Function: stringify],
        unserialize: [Function: parse]
      },
      clientP: Promise { [MongoClient] },
      options: {
        collectionName: 'sessions',
        ttl: 1209600,
        mongoOptions: [Object],
        autoRemove: 'native',
        autoRemoveInterval: 10,
        touchAfter: 0,
        stringify: true,
        crypto: [Object],
        mongoUrl: 'mongodb://admin:admin@ac-qrwvjvu-shard-00-00.dzmmmmd.mongodb.net:27017,ac-qrwvjvu-shard-00-01.dzmmmmd.mongodb.net:27017,ac-qrwvjvu-shard-00-02.dzmmmmd.mongodb.net:27017/ecommerce?ssl=true&replicaSet=atlas-qm59pc-shard-0&authSource=admin&retryWrites=true&w=majority'
      },
      collectionP: Promise { [Collection] },
      generate: [Function (anonymous)],
      [Symbol(kCapture)]: false
    },
    sessionID: '9kn6IHIXnjNpvBCDLlufmZKwt80kxejX',
    session: Session {
      cookie: {
        path: '/',
        _expires: 2022-11-12T21:15:30.248Z,
        originalMaxAge: 36000,
        httpOnly: true,
        secure: false
      }
    },
    logIn: [Function (anonymous)],
    login: [Function (anonymous)],
    logOut: [Function (anonymous)],
    logout: [Function (anonymous)],
    isAuthenticated: [Function (anonymous)],
    isUnauthenticated: [Function (anonymous)],
    _sessionManager: SessionManager {
      _key: 'passport',
      _serializeUser: [Function: bound ]
    },
    _passport: {
      instance: Authenticator {
        _key: 'passport',
        _strategies: [Object],
        _serializers: [Array],
        _deserializers: [Array],
        _infoTransformers: [],
        _framework: [Object],
        _sm: [SessionManager],
        Authenticator: [Function: Authenticator],
        Passport: [Function: Authenticator],
        Strategy: [Function],
        strategies: [Object],
        _userProperty: 'user'
      }
    },
    route: Route { path: '/:id', stack: [ [Layer] ], methods: { post: true } },
    [Symbol(kCapture)]: false,
    [Symbol(kHeaders)]: {
      'user-agent': 'vscode-restclient',
      'content-type': 'application/json',
      'accept-encoding': 'gzip, deflate',
      host: 'localhost:8080',
      connection: 'close',
      'content-length': '0'
    },
    [Symbol(kHeadersCount)]: 12,
    [Symbol(kTrailers)]: null,
    [Symbol(kTrailersCount)]: 0,
    [Symbol(RequestTimeout)]: undefined
  }




  {"cookie":{
        "originalMaxAge":36000,
        "expires":"2022-11-12T21:29:05.891Z",
        "secure":false,"httpOnly":true,"path":"/"},
    "passport":{
        "user":"carlosbeverina@gmail.com"}
  }